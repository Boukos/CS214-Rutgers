
Exceptional computation:
interrupts 		\
traps				 >  signals
exceptions		/

F-D-E loop

Fetch: load instruction at PC
Decode: discover operation type ... fetch operands ... latch into ALU ... 
Execute: do the thing with the stuff  (and then ++PC)

SP

compiler:
preprocessor
	- defines, macros ... performed on code (text replacement) 
	- typedefs, enums, struct defs, prototypes ... loaded into environment
compiler
	- typechecking and scanning (enforce grammar rules)
	- make code ready to convert to assembly (pick locations for vars...)
	- generate assembly
assembler
	- generate machine code from assembly
linker
	- load binaries that are not defined in source, but are referred to, into text segment

	
gcc -c aLibrary.c   ->   aLibrary.o
gcc mymain.c aLibrary.o   ->   a.out  (including runable code from mymain that references executable code from aLibrary.o)

> ./a.out	

a.out <-- program
OS's representation of running code in memory <-- process
source code reference to code (i.e. printf()) <-- function

	

for( i = 0; i < n, i++)
{
	f++;
}

-O1

int array[4];
int array[] = {1, 2, 3, 4};
int * array = (int*)malloc....

----

more malloc














